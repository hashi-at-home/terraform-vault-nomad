name: main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  artifact:
    outputs:
      terraform_url: ${{ steps.terraform.outputs.terraform_url }}
      vault_url: ${{ steps.vault.outputs.vault_url }}
      consul_url: ${{ steps.consul.outputs.consul_url }}
      nomad_url: ${{ steps.nomad.outputs.nomad_url }}
    runs-on: ubuntu-latest
    env:
      RELEASE_URL: https://api.releases.hashicorp.com
    steps:
      - id: terraform
        name: Get Latest Version of Terraform
        run: |
          terraform_url=$(curl -s "${RELEASE_URL}/v1/releases/terraform?limit=20&license_class=oss" | jq -r '.[0].builds[] | select (.arch == "amd64" and .os=="linux").url')
          echo "terraform_url=${terraform_url}" >> "$GITHUB_OUTPUT"
      - id: vault
        name: Get Latest Version of Vault
        run: |
          vault_url=$(curl -s "${RELEASE_URL}/v1/releases/vault?limit=20&license_class=oss" | jq -r '.[0].builds[] | select (.arch == "amd64" and .os=="linux").url')
          echo "vault_url=${vault_url}" >> "$GITHUB_OUTPUT"
      - id: consul
        name: Get Latest Version of Consul
        run: |
          consul_url=$(curl -s "${RELEASE_URL}/v1/releases/consul?limit=20&license_class=oss" | jq -r '.[0].builds[] | select (.arch == "amd64" and .os=="linux").url')
          echo "consul_url=${consul_url}" >> "$GITHUB_OUTPUT"
      - id: nomad
        name: Get Latest Version of Nomad
        run: |
          nomad_url=$(curl -s "${RELEASE_URL}/v1/releases/nomad?limit=20&license_class=oss" | jq -r '.[0].builds[] | select (.arch == "amd64" and .os=="linux").url')
          echo "nomad_url=${nomad_url}" >> "$GITHUB_OUTPUT"
  version:
    runs-on: ubuntu-latest
    outputs:
      terraform_version: ${{ steps.terraform_version.outputs.terraform_version }}
      consul_version: ${{ steps.consul_version.outputs.consul_version }}
      vault_version: ${{ steps.vault_version.outputs.vault_version }}
      nomad_version: ${{ steps.nomad_version.outputs.nomad_version }}
    env:
      RELEASE_URL: https://api.releases.hashicorp.com
    steps:
      - id: terraform_version
        name: Get Latest Version of terraform
        run: |
          v=$(curl -s "${RELEASE_URL}/v1/releases/terraform?limit=20&license_class=oss" | jq -r '.[0].version')
          echo $v
          echo "terraform_version=$v" >> "$GITHUB_OUTPUT"
      - id: consul_version
        name: Get Latest Version of Consul
        run: |
          v=$(curl -s "${RELEASE_URL}/v1/releases/consul?limit=20&license_class=oss" | jq -r '.[0].version')
          echo $v
          echo "consul_version=$v" >> "$GITHUB_OUTPUT"
      - id: vault_version
        name: Get Latest Version of Vault
        run: |
          v=$(curl -s "${RELEASE_URL}/v1/releases/vault?limit=20&license_class=oss" | jq -r '.[0].version')
          echo $v
          echo "vault_version=$v" >> "$GITHUB_OUTPUT"
      - id: nomad_version
        name: Get Latest Version of Nomad
        run: |
          v=$(curl -s "${RELEASE_URL}/v1/releases/nomad?limit=20&license_class=oss" | jq -r '.[0].version')
          echo $v
          echo "nomad_version=$v" >> "$GITHUB_OUTPUT"
  validate:
    needs:
      - version
      - artifact
    strategy:
      matrix:
        example:
          - simple
    name: validate
    env:
      NOMAD_ADDR: http://0.0.0.0:4646
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_TOKEN: ${{ github.run_id }}
      TF_VAR_nomad_addr: http://0.0.0.0:4646
      TERRAFORM_URL: ${{ needs.artifact.outputs.terraform_url }}
      TERRAFORM_VERSION: ${{ needs.version.outputs.terraform_version }}
      VAULT_URL: ${{ needs.artifact.outputs.vault_url }}
      VAULT_VERSION: ${{ needs.version.outputs.vault_version }}
      CONSUL_URL: ${{ needs.artifact.outputs.consul_url }}
      CONSUL_VERSION: ${{ needs.version.outputs.consul_version }}
      NOMAD_VERSION: ${{ needs.version.outputs.nomad_version }}
      NOMAD_URL: ${{ needs.artifact.outputs.nomad_url }}
    runs-on: ubuntu-24.04
    services:
      consul:
        image: hashicorp/consul:${{ needs.version.outputs.consul_version }}
        ports:
          - 8500:8500
      vault:
        image: hashicorp/vault:${{ needs.version.outputs.vault_version }}
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: ${{ env.VAULT_TOKEN }}
    steps:
      - name: Checkout code
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
      - name: Get Terraform
        run: |
          curl -fSLO ${TERRAFORM_URL}
          unzip -j terraform_${TERRAFORM_VERSION}_linux_amd64.zip terraform
      - name: Get Nomad
        run: |
          curl -fSLO ${NOMAD_URL}
          unzip -j nomad_${NOMAD_VERSION}_linux_amd64.zip nomad
      - name: Init terraform
        run: ./terraform -chdir=examples/${{ matrix.example }} init
      - name: Validate terraform
        run: ./terraform -chdir=examples/${{ matrix.example }} validate
      - name: Init
        run: ./terraform init
      - name: Start Nomad
        run: |
          ./nomad agent -server -bootstrap-expect=1 -vault-enabled -vault-token=${VAULT_TOKEN}  -data-dir=/tmp -acl-enabled &
      - name: Wait for Nomad to stabilise
        run: |
          sleep 5
      - name: Test
        run: |
          export NOMAD_TOKEN=$(./nomad acl bootstrap -json | jq -r .SecretID)
          echo ${NOMAD_TOKEN}
          ./nomad status
          ./terraform test
  release:
    needs:
      - validate
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: |
          npm install -D '@semantic-release/commit-analyzer' \
          '@semantic-release/release-notes-generator' \
          '@semantic-release/changelog' \
          'semantic-release-license' \
          '@semantic-release/github'
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
